name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.6.1'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_taxforms
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng libtesseract-dev
        sudo apt-get install -y poppler-utils libpoppler-cpp-dev
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install tesseract poppler
    
    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Install Tesseract using Chocolatey
        choco install tesseract
        # Add Tesseract to PATH
        echo "C:\Program Files\Tesseract-OCR" >> $GITHUB_PATH
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist black flake8 mypy
    
    - name: Download spaCy model
      run: |
        python -m spacy download en_core_web_sm
    
    - name: Run code formatting check
      run: |
        black --check src tests
    
    - name: Run linting
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        mypy src --ignore-missing-imports
    
    - name: Set environment variables for testing
      run: |
        echo "DB_TYPE=sqlite" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
        echo "ENABLE_EFILING=false" >> $GITHUB_ENV
        echo "LOG_LEVEL=DEBUG" >> $GITHUB_ENV
        echo "OUTPUT_DIR=./test_output" >> $GITHUB_ENV
    
    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
    
    - name: Run integration tests
      run: |
        pytest tests/ -v -m "not slow" --tb=short
      env:
        POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/test_taxforms
        MONGODB_URL: mongodb://localhost:27017/test_taxforms
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: test-artifacts-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          htmlcov/
          test_output/
          *.log

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check --json || true
    
    - name: Run bandit security check
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: |
          bandit-report.json

  build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        tags: irs-tax-parser:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm irs-tax-parser:latest python -c "import src.main; print('Docker image test passed')"
    
    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'irs-tax-parser:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng libtesseract-dev
        sudo apt-get install -y poppler-utils libpoppler-cpp-dev
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install memory-profiler psutil
        python -m spacy download en_core_web_sm
    
    - name: Run performance tests
      run: |
        # Create test data
        mkdir -p test_data
        # Add performance test script here
        python -c "
        import time
        from src.main import TaxFormProcessor
        print('Performance test completed - add actual performance tests here')
        "
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_results.json

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/irs-tax-parser:staging
          ${{ secrets.CONTAINER_REGISTRY }}/irs-tax-parser:staging-${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Add deployment steps specific to your staging environment
    # Example: Deploy to Kubernetes, AWS ECS, etc.

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.CONTAINER_REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push production image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        push: true
        tags: |
          ${{ secrets.CONTAINER_REGISTRY }}/irs-tax-parser:latest
          ${{ secrets.CONTAINER_REGISTRY }}/irs-tax-parser:${{ github.event.release.tag_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Add production deployment steps
    # Example: Deploy to production Kubernetes cluster

  documentation:
    name: Build and Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install -r requirements.txt
    
    - name: Build documentation
      run: |
        # Add Sphinx documentation build commands here
        echo "Building documentation..."
        mkdir -p docs/_build/html
        echo "<html><body><h1>Documentation will be built here</h1></body></html>" > docs/_build/html/index.html
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html

  notification:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "All CI/CD jobs completed successfully!"
        # Add notification logic here (Slack, email, etc.)
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "CI/CD pipeline failed!"
        # Add failure notification logic here