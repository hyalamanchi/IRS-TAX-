version: '3.8'

services:
  # Main application service
  tax-parser:
    build: 
      context: .
      target: production
    container_name: irs-tax-parser
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - DB_TYPE=postgresql
      - DATABASE_URL=postgresql://taxuser:${POSTGRES_PASSWORD}@db:5432/taxforms
      - ENABLE_EFILING=false
      - LOG_LEVEL=INFO
      - OUTPUT_DIR=/app/output
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/home/taxparser/app/data:ro
      - tax_output:/home/taxparser/app/output
      - tax_logs:/home/taxparser/app/logs
      - tax_uploads:/home/taxparser/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - tax_network
    healthcheck:
      test: ["CMD", "python", "-c", "import src.main; print('Health check passed')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL database
  db:
    image: postgres:15-alpine
    container_name: tax-parser-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=taxforms
      - POSTGRES_USER=taxuser
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - tax_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taxuser -d taxforms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: tax-parser-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultredispass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tax_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: tax-parser-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - tax_static:/var/www/static:ro
    depends_on:
      - tax-parser
    networks:
      - tax_network
    profiles:
      - full-stack

  # Celery worker for background processing
  celery-worker:
    build: 
      context: .
      target: production
    container_name: tax-parser-worker
    restart: unless-stopped
    command: celery -A src.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DB_TYPE=postgresql
      - DATABASE_URL=postgresql://taxuser:${POSTGRES_PASSWORD}@db:5432/taxforms
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - ./data:/home/taxparser/app/data:ro
      - tax_output:/home/taxparser/app/output
      - tax_logs:/home/taxparser/app/logs
      - tax_uploads:/home/taxparser/app/uploads
    depends_on:
      - db
      - redis
    networks:
      - tax_network
    profiles:
      - with-workers

  # Celery beat scheduler
  celery-beat:
    build: 
      context: .
      target: production
    container_name: tax-parser-scheduler
    restart: unless-stopped
    command: celery -A src.celery_app beat --loglevel=info
    environment:
      - DB_TYPE=postgresql
      - DATABASE_URL=postgresql://taxuser:${POSTGRES_PASSWORD}@db:5432/taxforms
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    volumes:
      - tax_logs:/home/taxparser/app/logs
    depends_on:
      - db
      - redis
    networks:
      - tax_network
    profiles:
      - with-workers

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: tax-parser-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tax_network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: tax-parser-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - tax_network
    profiles:
      - monitoring

  # pgAdmin for database management (development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: tax-parser-pgadmin
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@taxparser.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - tax_network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  tax_output:
    driver: local
  tax_logs:
    driver: local
  tax_uploads:
    driver: local
  tax_static:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  tax_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16